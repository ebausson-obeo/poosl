/*******************************************************************************
 * Copyright (c) 2021 TNO/ESI
 * This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License 2.0
 * which accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *
 * Contributors:
 *    TNO/ESI - initial API and implementation
 *    Obeo - refactoring
 *******************************************************************************/
/* API version 3.1 - Library of Data Structures - Embedded Systems Innovations by TNO
 * 
 * This library provides some common data structures.
 * 
 */

/* Array2D (2-Dimensional Array) - Creating a new Array2D yields a 2-Dimensional Array of size (0,0) (Empty 2-Dimensional Array). Valid indices for non-empty 2-Dimensional Arrays range from 1 to the number of rows respectively columns of the 2-Dimensional Array.*/
data class Array2D extends Object
variables
	RowArray : Array,
	Rows : Integer,
	Columns : Integer
methods
	// Methods for end-users
	/* Returns the number of objects in the Array2D (rows * columns) */
	size : Integer
		if RowArray = nil then
			self resize(0, 0)
		fi;
		return Rows * Columns

	/* Returns the number of rows */
	rows : Integer
		if RowArray = nil then
			self resize(0, 0)
		fi;
		return Rows

	/* Returns the number of columns */
	columns : Integer
		if RowArray = nil then
			self resize(0, 0)
		fi;
		return Columns

	/* Changes the dimensions of the Array2D where R is the number of rows and C is the number of columns. In case R or C is smaller than the current dimensions, elements are removed. In case R or C is larger than the current dimensions, elements valued nil are added. Changes the dimensions of the Array2D where R is the number of rows and C is the number of columns. In case R or C is smaller than the current dimensions, elements are removed. In case R or C is larger than the current dimensions, elements valued nil are added. If R and C do not represent non-negative Integers, an error is generated */
	resize(R, C : Integer) : Array2D | I : Integer |
		if (R = nil) | (R isOfType("Integer") not) | (C = nil) | (C isOfType("Integer") not) then
			self error("Parameters for method \"resize\" of Array2D must be Integers")
		fi;
		if (R < 0) | (C < 0) then
			self error("Parameters for method \"resize\" of Array2D must not be negative")
		fi;
		if RowArray = nil then
			RowArray := new(Array);
			Rows := 0
		fi;
		Columns := C;
		RowArray resize(R);
		if Rows > R then
			Rows := R
		fi;
		I := 0;
		while I < Rows do
			I := I + 1;
			RowArray at(I) resize(Columns)
		od;
		while Rows < R do
			Rows := Rows + 1;
			RowArray putAt(Rows, new(Array) resize(Columns))
		od;
		return self

	/* Returns the object located at row R and column C in case R and C are Integers within the dimensions of the Array2D. Otherwise, an error is generated */
	at(R, C : Integer) : Object
		if RowArray = nil then
			self resize(0, 0)
		fi;
		if (R = nil) | (R isOfType("Integer") not) | (C = nil) | (C isOfType("Integer") not) then
			self error("Parameters for method \"at\" of Array2D must be Integers")
		fi;
		if (R < 1) | (C < 1) | (R > Rows) | (C > Columns) then
			self error("Index out of bounds for method \"at\" of Array2D")
		fi;
		return RowArray at(R) at(C)

	/* Replaces the object at row R and column C with O in case R and C are Integers within the dimensions of the Array2D. Otherwise, an error is generated */
	putAt(R, C : Integer, anObject : Object) : Array2D
		if RowArray = nil then
			self resize(0, 0)
		fi;
		if (R = nil) | (R isOfType("Integer") not) | (C = nil) | (C isOfType("Integer") not) then
			self error("First and second parameters for method \"putAt\" of Array2D must be Integers")
		fi;
		if (R < 1) | (C < 1) | (R > Rows) | (C > Columns) then
			self error("Index out of bounds for method \"putAt\" of Array2D")
		fi;
		RowArray at(R) putAt(C, anObject);
		return self

	/* Replaces all elements in the Array2D by object O */
	putAll(O : Object) : Array2D | I : Integer |
		if RowArray = nil then
			self resize(0, 0)
		fi;
		I := 1;
		while I <= Rows do
			RowArray at(I) putAll(O);
			I := I + 1
		od;
		return self

	/* Returns a pretty print */
	printString : String | Out : String, I, J : Integer |
		if RowArray = nil then
			self resize(0, 0)
		fi;
		if (Rows != 0) & (Columns != 0) then
			Out := "Array2D[" concat(Rows printString) concat(",") concat(Columns printString) concat("]:\n");
			I := 0;
			while I < Rows do
				I := I + 1;
				J := 0;
				Out concat("[");
				while J < Columns do
					J := J + 1;
					Out concat(RowArray at(I) at(J) printString);
					if J < Columns then
						Out concat(", ")
					fi
				od;
				Out concat("]\n")
			od
		else
			Out := "Array2D[0,0]"
		fi;
		return Out