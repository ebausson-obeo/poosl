import "../libraries/Vector.poosl"

data class VectorTester
variables

methods
	@Test
	testAssignmentReal() : Object | a, b : Vector, errorMsg : String |
		errorMsg := "Test of real valued assignment failed";
		a := new(Vector) init() resize(2) putAt(1, 1.0) putAt(2, 1.0); // Real valued vector
		b := new(Vector) init() resize(2) putAt(1, 2.0) putAt(2, 3.0); // Real valued vector
		nil assert((a at(1) = 1.0) & (a at(2) = 1.0), errorMsg);
		nil assert((b at(1) = 2.0) & (b at(2) = 3.0), errorMsg);
		return self

	@Test
	testAssignmentInteger() : Object | c, d : Vector, errorMsg : String |
		errorMsg := "Test of integer assignment failed";
		c := new(Vector) init() resize(2) putAt(1, 3) putAt(2, 6); // Integer vector
		d := new(Vector) init() resize(2) putAt(1, 5) putAt(2, 13); // Integer vector
		// Tests that integers were converted to reals
		nil assert((c at(1) = 3.0) & (c at(2) = 6.0), errorMsg);
		nil assert((d at(1) = 5.0) & (d at(2) = 13.0), errorMsg);
		return self

	@Test
	testAdditionReal() : Object | a, b, result : Vector, errorMsg : String |
		errorMsg := "Test of real valued addition failed";
		a := new(Vector) init() resize(2) putAt(1, 1.0) putAt(2, 1.0); // Real valued vector
		b := new(Vector) init() resize(2) putAt(1, 2.0) putAt(2, 3.0); // Real valued vector
		result := a + b;
		// result should have right value while a and b should be unaffected
		nil assert((result at(1) = 3.0) & (result at(2) = 4.0), errorMsg);
		nil assert((a at(1) = 1.0) & (a at(2) = 1.0), errorMsg);
		nil assert((b at(1) = 2.0) & (b at(2) = 3.0), errorMsg);
		a add_vector(b);
		// The add function should change the state of a directly and b should be unaffected
		nil assert((a at(1) = 3.0) & (a at(2) = 4.0), errorMsg);
		nil assert((b at(1) = 2.0) & (b at(2) = 3.0), errorMsg);
		return self

	@Test
	testSubtractionReal() : Object | a, b, result : Vector, errorMsg : String |
		errorMsg := "Test of real valued subtraction failed";
		a := new(Vector) init() resize(2) putAt(1, 1.0) putAt(2, 1.0); // Real valued vector
		b := new(Vector) init() resize(2) putAt(1, 2.0) putAt(2, 3.0); // Real valued vector
		result := b - a;
		// result should have right value while a and b should be unaffected
		nil assert((result at(1) = 1.0) & (result at(2) = 2.0), errorMsg);
		nil assert((a at(1) = 1.0) & (a at(2) = 1.0), errorMsg);
		nil assert((b at(1) = 2.0) & (b at(2) = 3.0), errorMsg);
		// The subtract function should change the state of a directly and b should be unaffected
		a subtract_vector(b);
		nil assert((a at(1) = -1.0) & (a at(2) = -2.0), errorMsg);
		nil assert((b at(1) = 2.0) & (b at(2) = 3.0), errorMsg);
		return self

	@Test
	testMultiplicationDivisionReal() : Object | b, result : Vector, r : Real, errorMsg : String |
		errorMsg := "Test of multiplication with real failed";
		b := new(Vector) init() resize(2) putAt(1, 2.0) putAt(2, 3.0);
		r := 2.5;
		result := b * r;
		// result should have right value and b should be unaffected
		nil assert((result at(1) = 5.0) & (result at(2) = 7.5), errorMsg);
		nil assert((b at(1) = 2.0) & (b at(2) = 3.0), errorMsg);
		errorMsg := "Test of division with real failed";
		r := 2.0;
		result := b / r;
		// result should have right value and b should be unaffected
		nil assert((result at(1) = 1.0) & (result at(2) = 1.5), errorMsg);
		nil assert((b at(1) = 2.0) & (b at(2) = 3.0), errorMsg);
		return self

	@Test
	testNorm1() : Object | a : Vector, r : Real, errorMsg : String |
		errorMsg := "Test of norm failed";
		a := new(Vector) init() resize(2) putAt(1, 1.0) putAt(2, 1.0);
		r := a norm();
		// r should have right value and a should be unaffected
		nil assert(r = 2.0 sqrt(), errorMsg);
		nil assert((a at(1) = 1.0) & (a at(2) = 1.0), errorMsg);
		return self

	@Test
	testNorm2() : Object | b : Vector, r : Real, errorMsg : String |
		errorMsg := "Test of norm failed";
		b := new(Vector) init() resize(2) putAt(1, 2.0) putAt(2, 3.0);
		r := b norm();
		// r should have right value and b should be unaffected
		nil assert(r = 13.0 sqrt(), errorMsg);
		nil assert((b at(1) = 2.0) & (b at(2) = 3.0), errorMsg);
		return self

	@Test
	testNormZero() : Object | c : Vector, r : Real, errorMsg : String |
		errorMsg := "Test of norm failed";
		c := new(Vector) init() resize(2) putAt(1, 0.0) putAt(2, 0.0); // zero vector
		r := c norm();
		nil assert(r = 0.0, errorMsg);
		nil assert((c at(1) = 0.0) & (c at(2) = 0.0), errorMsg);
		return self

	@Test
	testDotProduct() : Object | a, b : Vector, errorMsg : String |
		errorMsg := "Test of dot product failed";
		a := new(Vector) init() resize(2) putAt(1, 1.0) putAt(2, 1.0);
		b := new(Vector) init() resize(2) putAt(1, 2.0) putAt(2, 3.0);
		// Test that dot product is correct, symmetric and that a and b are unaffected
		nil assert(a dot(b) = b dot(a), errorMsg);
		nil assert((a at(1) = 1.0) & (a at(2) = 1.0), errorMsg);
		nil assert((b at(1) = 2.0) & (b at(2) = 3.0), errorMsg);
		nil assert(a dot(b) = 5.0, errorMsg);
		return self

	@Test
	testAngle() : Object | e, f : Vector, errorMsg : String |
		errorMsg := "Test of angle failed";
		e := new(Vector) init() resize(2) putAt(1, 1.0) putAt(2, 0.0);
		f := new(Vector) init() resize(2) putAt(1, 0.0) putAt(2, 1.0);
		// Test the angle is symmetric, correct, and that e and f are unaffected
		nil assert(e angle(f) = f angle(e), errorMsg);
		nil assert(e angle(e) = 0.0, errorMsg); // Vector with itself
		nil assert((e angle(f) > 1.5707) & (e angle(f) < 1.5708), errorMsg); // Orthogonal vectors
		nil assert((e at(1) = 1.0) & (e at(2) = 0.0), errorMsg);
		nil assert((f at(1) = 0.0) & (f at(2) = 1.0), errorMsg);
		return self

	@Test
	testCrossProduct() : Object | e, f, result : Vector, errorMsg : String |
		errorMsg := "Test of cross product failed";
		e := new(Vector) init() resize(3) putAt(1, 1.0) putAt(2, 0.0) putAt(3, 0.0);
		f := new(Vector) init() resize(3) putAt(1, 0.0) putAt(2, 1.0) putAt(3, 0.0);
		// Test that result is correct and that e and f are unaffected
		result := e cross(f);
		nil assert((result at(1) = 0.0) & (result at(2) = 0.0) & (result at(3) = 1.0), errorMsg);
		result := f cross(e);
		nil assert((result at(1) = 0.0) & (result at(2) = 0.0) & (result at(3) = -1.0), errorMsg);
		nil assert((e at(1) = 1.0) & (e at(2) = 0.0) & (e at(3) = 0.0), errorMsg);
		nil assert((f at(1) = 0.0) & (f at(2) = 1.0) & (f at(3) = 0.0), errorMsg);
		return self

	@Test
	testEquality() : Object | a, b : Vector, errorMsg : String |
		errorMsg := "Test of equals failed";
		a := new(Vector) init() resize(3) putAt(1, 1.0) putAt(2, 1.0) putAt(3, -1.0);
		b := new(Vector) init() resize(3) putAt(1, 2.0) putAt(2, 3.0) putAt(3, -1.0);
		nil assert((a = a) & (b = b), errorMsg);
		nil assert((a = b) not, errorMsg);
		return self

system
ports

instances

channels
