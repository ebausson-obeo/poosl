//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.1 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2021.12.20 at 03:57:25 PM CET 
//

package org.eclipse.poosl.generatedxmlclasses;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;

/**
 * <p>
 * Java class for t_handle_type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within
 * this class.
 * <p>
 * 
 * <pre>
 * &lt;simpleType name="t_handle_type"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="poosl_specification"/&gt;
 *     &lt;enumeration value="cluster_class"/&gt;
 *     &lt;enumeration value="process_class"/&gt;
 *     &lt;enumeration value="data_class"/&gt;
 *     &lt;enumeration value="initial_method_call"/&gt;
 *     &lt;enumeration value="process_method"/&gt;
 *     &lt;enumeration value="data_method"/&gt;
 *     &lt;enumeration value="expression"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "t_handle_type")
@XmlEnum
public enum THandleType {

    @XmlEnumValue("poosl_specification")
    POOSL_SPECIFICATION("poosl_specification"), @XmlEnumValue("cluster_class")
    CLUSTER_CLASS("cluster_class"), @XmlEnumValue("process_class")
    PROCESS_CLASS("process_class"), @XmlEnumValue("data_class")
    DATA_CLASS("data_class"), @XmlEnumValue("initial_method_call")
    INITIAL_METHOD_CALL("initial_method_call"), @XmlEnumValue("process_method")
    PROCESS_METHOD("process_method"), @XmlEnumValue("data_method")
    DATA_METHOD("data_method"), @XmlEnumValue("expression")
    EXPRESSION("expression");

    private final String value;

    THandleType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static THandleType fromValue(String v) {
        for (THandleType c : THandleType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
