importlib "distributions.poosl"

data class MarkovChain extends Object
variables
	NumberOfStates : Integer,
	Random : Uniform,
	Transitions : Array,
	StateSpace : Array,
	CurrentState : String
methods
	@Init
	init : MarkovChain
		NumberOfStates := 0;
		StateSpace := new(Array);
		Transitions := new(Array);
		Random := new(Uniform) withParameters(0.0, 1.0);
		return self

	addTransition(State : String, NextState : String, LowerBound : Real, UpperBound : Real) : MarkovChain | i,
			StateNumber : Integer, T, A : Array |
		i := 1;
		while i <= StateSpace size do
			if StateSpace at(i) = State then
				StateNumber := i
			fi;
			i := i + 1
		od;
		T := Transitions at(StateNumber);
		A := new(Array) resize(3);
		A putAt(1, NextState) putAt(2, LowerBound) putAt(3, UpperBound);
		T resize(T size + 1);
		T putAt(T size, A);
		return self

	setInitialState(State : String) : MarkovChain
		CurrentState := State;
		return self

	getNextScenario : String | NextState : String, i, StateNumber : Integer, T : Array, Sample : Real |
		i := 1;
		while i <= StateSpace size do
			if StateSpace at(i) = CurrentState then
				StateNumber := i
			fi;
			i := i + 1
		od;
		T := Transitions at(StateNumber);
		Sample := Random sample;
		i := 1;
		while i <= T size do
			if ((Sample > T at(i) at(2)) & (Sample <= T at(i) at(3))) then
				NextState := T at(i) at(1)
			fi;
			i := i + 1
		od;
		CurrentState := NextState;
		return NextState

	addState(State : String) : MarkovChain
		NumberOfStates := NumberOfStates + 1;
		StateSpace resize(NumberOfStates);
		StateSpace putAt(NumberOfStates, State);
		Transitions resize(NumberOfStates);
		Transitions putAt(NumberOfStates, new(Array));
		return self

process class TaskFirst(Iterate : Boolean, MapTo : String, Name : String, Priority : Integer)
ports
	In,
	Out1,
	Out2,
	Out3,
	Computation,
	Control2,
	Control3,
	Control4,
	Control5,
	Control6,
	Control7,
	Monitor
messages
	Computation!Execute(String, String, Integer, String),
	Computation!Use(String),
	Computation?ExecutionCompleted(String),
	Control2!MappedTo(String),
	Control2!ReserveRoom(Integer),
	Control2!WriteTokens(String),
	Control2?ReservationSuccessful(),
	Control3!MappedTo(String),
	Control3!ReserveRoom(Integer),
	Control3!WriteTokens(String),
	Control3?ReservationSuccessful(),
	Control4!MappedTo(String),
	Control4!ReserveRoom(Integer),
	Control4!WriteTokens(String),
	Control4?ReservationSuccessful(),
	Control5!MappedTo(String),
	Control5!ReserveRoom(Integer),
	Control5!WriteTokens(String),
	Control5?ReservationSuccessful(),
	Control6!MappedTo(String),
	Control6!ReserveRoom(Integer),
	Control6!WriteTokens(String),
	Control6?ReservationSuccessful(),
	Control7!MappedTo(String),
	Control7!ReserveRoom(Integer),
	Control7!WriteTokens(String),
	Control7?ReservationSuccessful(),
	In!InspectTokenAvailability(Integer),
	In!MappedTo(String),
	In!ReleaseRoom(),
	In?TokensAvailable(),
	Out1!MappedTo(String),
	Out1!ReserveRoom(Integer),
	Out1!WriteTokens(),
	Out1?ReservationSuccessful(),
	Out2!MappedTo(String),
	Out2!ReserveRoom(Integer),
	Out2!WriteTokens(),
	Out2?ReservationSuccessful(),
	Out3!MappedTo(String),
	Out3!ReserveRoom(Integer),
	Out3!WriteTokens(),
	Out3?ReservationSuccessful(),
	Monitor?StopSimulation()
variables
	MarkovChain : MarkovChain
init
	Initialise()()
methods
	Initialise()()
		NotifyBuffersAboutMapping()();
		NotifyPlatformAboutMapping()();
		{
			MarkovChain := new(MarkovChain) init;
			MarkovChain addState("S1");
			MarkovChain addTransition("S1", "S1", 0.0, 1.0 / 2.0);
			MarkovChain addTransition("S1", "S2", 1.0 / 2.0, 1.0);
			MarkovChain addState("S2");
			MarkovChain addTransition("S2", "S2", 0.0, 2.0 / 3.0);
			MarkovChain addTransition("S2", "S1", 2.0 / 3.0, 1.0);
			MarkovChain setInitialState("S1")
		};
		abort
			Fire()()
		with Monitor?StopSimulation

	NotifyBuffersAboutMapping()()
		par
			In!MappedTo(MapTo)
		and
			Out1!MappedTo(MapTo)
		and
			Out2!MappedTo(MapTo)
		and
			Out3!MappedTo(MapTo)
		and
			Control2!MappedTo(MapTo)
		and
			Control3!MappedTo(MapTo)
		and
			Control4!MappedTo(MapTo)
		and
			Control5!MappedTo(MapTo)
		and
			Control6!MappedTo(MapTo)
		and
			Control7!MappedTo(MapTo)
		rap

	NotifyPlatformAboutMapping()()
		Computation!Use(MapTo)

	Fire()() | Scenario : String |
		if Iterate then
			Scenario := MarkovChain getNextScenario
		else
			Scenario := "S1"
		fi;
		CheckTokenAvailabilityForReads(Scenario)();
		ReserveSpaceForWrites(Scenario)();
		Execute(Scenario)();
		ReleaseSpaceForReads(Scenario)();
		PerformWrites(Scenario)();
		if Iterate then
			Fire()()
		fi

	Execute(Scenario : String)() | N : String |
		Computation!Execute(Name, Scenario, Priority, MapTo);
		Computation?ExecutionCompleted(N | N = Name)

	@SuppressWarnings("unused")
	CheckTokenAvailabilityForReads(Scenario : String)()
		In!InspectTokenAvailability(1);
		In?TokensAvailable

	@SuppressWarnings("unused")
	ReleaseSpaceForReads(Scenario : String)()
		In!ReleaseRoom

	ReserveSpaceForWrites(Scenario : String)()
		Control2!ReserveRoom(1);
		Control2?ReservationSuccessful;
		Control3!ReserveRoom(1);
		Control3?ReservationSuccessful;
		Control4!ReserveRoom(1);
		Control4?ReservationSuccessful;
		Control5!ReserveRoom(1);
		Control5?ReservationSuccessful;
		Control6!ReserveRoom(1);
		Control6?ReservationSuccessful;
		Control7!ReserveRoom(1);
		Control7?ReservationSuccessful;
		Out1!ReserveRoom(2048);
		Out1?ReservationSuccessful;
		Out2!ReserveRoom(1024);
		Out2?ReservationSuccessful;
		if Scenario = "S1" then
			Out3!ReserveRoom(2048);
			Out3?ReservationSuccessful
		fi

	PerformWrites(Scenario : String)()
		Control2!WriteTokens(Scenario);
		Control3!WriteTokens(Scenario);
		Control4!WriteTokens(Scenario);
		Control5!WriteTokens(Scenario);
		Control6!WriteTokens(Scenario);
		Control7!WriteTokens(Scenario);
		Out1!WriteTokens;
		Out2!WriteTokens;
		if Scenario = "S1" then
			Out3!WriteTokens
		fi