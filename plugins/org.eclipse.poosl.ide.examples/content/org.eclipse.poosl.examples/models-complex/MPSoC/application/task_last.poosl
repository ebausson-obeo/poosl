importlib "performance.poosl"
import "task.poosl"

data class ApplicationStatus extends Object
variables
	NextDeadline : Real,
	DesiredThroughput : Real,
	NumberOfFirings : Integer,
	NumberOfDeadlineMisses : Integer,
	TimeOfLastFiring : Real,
	Throughput : LongRunRateAverage
methods
	fired(CurrentTime : Real) : ApplicationStatus
		NumberOfFirings := NumberOfFirings + 1;
		Throughput rewardBM(1.0, CurrentTime);
		if CurrentTime > NextDeadline then
			NumberOfDeadlineMisses := NumberOfDeadlineMisses + 1
		fi;
		NextDeadline := NextDeadline + 1.0 / DesiredThroughput;
		TimeOfLastFiring := CurrentTime;
		return self

	@Init
	init(DL, DT : Real) : ApplicationStatus
		NumberOfFirings := 0;
		NumberOfDeadlineMisses := 0;
		NextDeadline := DL;
		DesiredThroughput := DT;
		TimeOfLastFiring := 0.0;
		Throughput := new(LongRunRateAverage) withParameters(0.95, 0.95) setBatchSize(1000);
		return self

	printString : String
		if NumberOfFirings > 0 then
			if NumberOfFirings = 1 then
				return "Throughput Results: " cr + Throughput logStatistics cr cr + (100.0 * (NumberOfDeadlineMisses
					asReal / NumberOfFirings asReal)) printString + "% Deadline Misses" cr cr + "Latency: " +
					TimeOfLastFiring printString
			else
				return "Throughput Results: " cr + Throughput printString cr cr + (100.0 * (NumberOfDeadlineMisses
					asReal / NumberOfFirings asReal)) printString + "% Deadline Misses"
			fi
		else
			return "Waiting for first frame"
		fi

	log : ApplicationStatus | LogFile : FileOut |
		LogFile := new(FileOut) destination("Application.log") open;
		if NumberOfFirings = 1 then
			LogFile write("Throughput Results: " cr + Throughput logStatistics cr cr + (100.0 * (NumberOfDeadlineMisses
				asReal / NumberOfFirings asReal)) printString + "% Deadline Misses" cr cr + "Latency: " +
				TimeOfLastFiring printString)
		else
			LogFile write("Throughput Results: " cr + Throughput logStatistics cr cr + (100.0 * (NumberOfDeadlineMisses
				asReal / NumberOfFirings asReal)) printString + "% Deadline Misses")
		fi;
		LogFile close;
		return self

	accurate : Boolean
		return Throughput accurate

process class TaskLast(DesiredLatency : Real, DesiredThroughput : Real, Iterate : Boolean) extends Task
ports
	In1,
	In2,
	In3,
	Out,
	Monitor
messages
	Control!MappedTo(String),
	In1!InspectTokenAvailability(Integer),
	In1!MappedTo(String),
	In1!ReleaseRoom(),
	In1?TokensAvailable(),
	In2!InspectTokenAvailability(Integer),
	In2!MappedTo(String),
	In2!ReleaseRoom(),
	In2?TokensAvailable(),
	In3!InspectTokenAvailability(Integer),
	In3!MappedTo(String),
	In3!ReleaseRoom(),
	In3?TokensAvailable(),
	Out!MappedTo(String),
	Out!ReserveRoom(Integer),
	Out!WriteTokens(),
	Out?ReservationSuccessful(),
	Monitor!ApplicationAccuracyStatus(Boolean),
	Monitor!Iterate(Boolean),
	Monitor?ApplicationStatus(),
	Monitor?StopSimulation()
variables
	Status : ApplicationStatus
init
	Initialise()()
methods
	Initialise()()
		NotifyBuffersAboutMapping()();
		NotifyPlatformAboutMapping()();
		Status := new(ApplicationStatus) init(DesiredLatency, DesiredThroughput);
		Monitor!Iterate(Iterate);
		abort
			par
				Fire()()
			and
				CheckAccuracyStatus()()
			rap
		with Monitor?StopSimulation {Status log}

	CheckAccuracyStatus()()
		Monitor?ApplicationStatus;
		Monitor!ApplicationAccuracyStatus(Status accurate);
		CheckAccuracyStatus()()

	Fire()() | Scenario : String |
		Control!InspectTokenAvailability;
		Control?TokenAvailable(Scenario);
		CheckTokenAvailabilityForReads(Scenario)();
		ReserveSpaceForWrites(Scenario)();
		Execute(Scenario)();
		ReleaseSpaceForReads(Scenario)();
		PerformWrites(Scenario)();
		Control!ReleaseRoom;
		Status fired(currentTime);
		Fire()()

	NotifyBuffersAboutMapping()()
		par
			In1!MappedTo(MapTo)
		and
			In2!MappedTo(MapTo)
		and
			In3!MappedTo(MapTo)
		and
			Out!MappedTo(MapTo)
		and
			Control!MappedTo(MapTo)
		rap

	CheckTokenAvailabilityForReads(Scenario : String)()
		if Scenario = "S1" then
			In1!InspectTokenAvailability(1024)
		fi;
		if Scenario = "S2" then
			In1!InspectTokenAvailability(2048)
		fi;
		In1?TokensAvailable;
		In2!InspectTokenAvailability(3072);
		In2?TokensAvailable;
		In3!InspectTokenAvailability(1024);
		In3?TokensAvailable

	@SuppressWarnings("unused")
	ReleaseSpaceForReads(Scenario : String)()
		In1!ReleaseRoom;
		In2!ReleaseRoom;
		In3!ReleaseRoom

	@SuppressWarnings("unused")
	ReserveSpaceForWrites(Scenario : String)()
		Out!ReserveRoom(1);
		Out?ReservationSuccessful

	@SuppressWarnings("unused")
	PerformWrites(Scenario : String)()
		Out!WriteTokens